{"version":3,"sources":["components/Schedule/Schedule.js","App.js","serviceWorker.js","index.js"],"names":["Title","Typography","groupBy","list","keyGetter","map","Map","forEach","item","key","collection","get","push","set","Schedule","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","roundSortOrder","handleRoundClick","event","setState","grouped","state","roundGrouped","isGroupedByRound","handleDateClick","dateGrouped","_this2","Array","from","props","postseasonGames","game","Date","gameDate","toDateString","sort","a","b","seriesDescription","indexOf","_this3","react_default","createElement","className","level","es_button","Group","size","type","onClick","group","date","dateGames","itemLayout","dataSource","renderItem","Schedule_Game","React","Component","Game","gamePk","row","gutter","col","span","Item","Meta","title","description","toLocaleDateString","teams","away","team","name","isWinner","score","home","decisions","winner","initLastName","loser","toLocaleString","hour","minute","App","getPostseasonData","axios","cancelToken","CancelToken","c","cancel","then","response","games","data","series","serie","concat","postseasonData","postseasonDataLoaded","components_Schedule_Schedule","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98ac2bde.chunk.js","sourcesContent":["import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n/** Ant Components */\nimport { Row, Col, Button, List, Typography } from \"antd\";\n\nimport \"./Schedule.css\";\n\nconst { Title } = Typography;\n\nconst groupBy = (list, keyGetter) => {\n  const map = new Map();\n  list.forEach(item => {\n    const key = keyGetter(item);\n    const collection = map.get(key);\n    if (!collection) {\n      map.set(key, [item]);\n    } else {\n      collection.push(item);\n    }\n  });\n  return map;\n};\n\nclass Schedule extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      dateGrouped: [],\n      roundGrouped: [],\n      grouped: [],\n      isGroupedByRound: false\n    };\n  }\n\n  componentDidMount() {\n    const dateGrouped = Array.from(\n      groupBy(this.props.postseasonGames, game =>\n        new Date(game.gameDate).toDateString()\n      )\n    ).sort((a, b) => new Date(a[0]) - new Date(b[0]));\n\n    const roundGrouped = Array.from(\n      groupBy(this.props.postseasonGames, game => game.seriesDescription)\n    ).sort((a, b) => this.roundSortOrder.indexOf(a[0]) - this.roundSortOrder.indexOf(b[0]));\n\n    this.setState({\n      dateGrouped: dateGrouped,\n      grouped: dateGrouped,\n      roundGrouped: roundGrouped\n    });\n  }\n\n  roundSortOrder = ['Regular Season', 'AL Wild Card Game', 'NL Wild Card Game', 'AL Division Series', 'NL Division Series', 'AL Championship Series', 'NL Championship Series', 'World Series'];\n\n  handleRoundClick = event => {\n    this.setState({ grouped: this.state.roundGrouped, isGroupedByRound: true });\n  };\n\n  handleDateClick = event => {\n    this.setState({ grouped: this.state.dateGrouped, isGroupedByRound: false });\n  };\n\n  render() {\n    return (\n      <div className=\"schedule\">\n        <Title level={3} className=\"scheduleTitle\">\n          <span>2018 MLB Postseason Schedule</span>\n        </Title>\n        <div className=\"groupByBtns\">\n          <Button.Group size=\"large\">\n            <Button\n              type=\"primary\"\n              className={!this.state.isGroupedByRound ? \"selectedBtn\" : \"unselectedBtn\"}\n              onClick={this.handleDateClick}\n            >\n              By Date\n            </Button>\n            <Button\n              type=\"default\"\n              className={this.state.isGroupedByRound ? \"selectedBtn\" : \"unselectedBtn\"}\n              onClick={this.handleRoundClick}\n            >\n              By Round\n            </Button>\n          </Button.Group>\n        </div>\n        {this.state.grouped.map(group => {\n          const date = group[0];\n          const dateGames = group[1];\n          return (\n            <div key={date} className=\"gameDate\">\n              <Title level={4} className=\"gameDateTitle\">\n                {date}\n              </Title>\n              <List\n                itemLayout=\"horizontal\"\n                dataSource={dateGames}\n                renderItem={item => {\n                  return <Game game={item} isGroupedByRound={this.state.isGroupedByRound} />;\n                }}\n              />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst Game = props => {\n  return (\n    <div key={props.game.gamePk}>\n      <Row gutter={16}>\n        <Col span={24}>\n          <List.Item>\n            <List.Item.Meta\n              title={props.game.description + (props.isGroupedByRound ? ' - ' + new Date(props.game.gameDate).toLocaleDateString() : '')}\n              description={\n                <Row gutter={16}>\n                  <span className=\"matchupText\">\n                    <Col span={5}>\n                      <div className=\"awayTeam\">\n                        {props.game.teams.away.team.name}\n                        <span\n                          className={\n                            props.game.teams.away.isWinner ? \"winningScore\" : \"\"\n                          }\n                        >\n                          {\" \"}\n                          {props.game.teams.away.score}\n                        </span>\n                      </div>\n                    </Col>\n                    <Col span={5}>\n                      <div className=\"homeTeam\">\n                        @ {props.game.teams.home.team.name}\n                        <span\n                          className={\n                            props.game.teams.home.isWinner ? \"winningScore\" : \"\"\n                          }\n                        >\n                          {\" \"}\n                          {props.game.teams.home.score}\n                        </span>\n                      </div>\n                    </Col>\n                    <Col span={4}>\n                      {\"winner\" in props.game.decisions ? (\n                        <div className=\"winningPitcher\">\n                          W: {props.game.decisions.winner.initLastName}\n                        </div>\n                      ) : (\n                        \"\"\n                      )}\n                    </Col>\n                    <Col span={4}>\n                      {\"loser\" in props.game.decisions ? (\n                        <div className=\"losingPitcher\">\n                          L: {props.game.decisions.loser.initLastName}\n                        </div>\n                      ) : (\n                        \"\"\n                      )}\n                    </Col>\n                    <Col span={4}>\n                      {\"save\" in props.game.decisions\n                        ? \"SV: \" + props.game.decisions.winner.initLastName\n                        : \"\"}\n                    </Col>\n                    <Col span={2}>\n                      <div className=\"gameTime\">\n                        {new Date(props.game.gameDate).toLocaleString([], {\n                          hour: \"2-digit\",\n                          minute: \"2-digit\"\n                        })}\n                      </div>\n                    </Col>\n                  </span>\n                </Row>\n              }\n            />\n          </List.Item>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nSchedule.propTypes = {\n  postseasonData: PropTypes.object,\n  postseasonGames: PropTypes.array\n};\n\nGame.propTypes = {\n  game: PropTypes.object\n};\n\nexport default Schedule;\n","import React from 'react';\nimport axios from 'axios';\n\nimport Schedule from './components/Schedule/Schedule';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    // Initialize empty state for postseasonData and postseasonGames\n    this.state = {\n      postseasonData: {},\n      postseasonGames: [],\n      postseasonDataLoaded: false,\n    };\n    this.cancel = null;\n  }\n\n  componentDidMount() {\n    this.getPostseasonData();\n  }\n\n  componentWillUnmount() {\n    this.cancel();\n  }\n\n  getPostseasonData = () => {\n    axios\n      .get(\n        `https://statsapi.mlb.com/api/v1/schedule/postseason/series?sportId=1&season=2018&hydrate=team,broadcasts(all),seriesStatus(useOverride=true),decisions,person,probablePitcher,linescore(matchup)`,\n        {\n          cancelToken: new axios.CancelToken(c => {\n            this.cancel = c;\n          }),\n        },\n      )\n      .then(response => {\n        let games = [];\n        response.data.series.forEach(serie => {\n          games = games.concat(serie.games);\n        });\n        this.setState({\n          postseasonData: response.data,\n          postseasonGames: games,\n          postseasonDataLoaded: true,\n        });\n      });\n  };\n\n  render() {\n    return this.state.postseasonDataLoaded ? (\n      <div className='App'>\n        <Schedule\n          postseasonData={this.state.postseasonData}\n          postseasonGames={this.state.postseasonGames}\n        />\n      </div>\n    ) : (\n      <div className='App'>Data Loading...</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}